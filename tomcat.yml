apiVersion: v1
#kind: Namespace
metadata:
  name: dhana

---
#service= Load
apiVersion: v1
kind: Service
metadata:
  name: myapp
  namespace: dhana
spec:
  selector:
    app: myapp
  type: LoadBalancer
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
  - name: myapp
    protocol: TCP
    port: 80
    targetPort: 80
    # If you set the `spec.type` field to `NodePort` and you want a specific port number,
    # you can specify a value in the `spec.ports[*].nodePort` field.
    nodePort: 35100
    ---
    #service=ingress
    # https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource
    
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: myapp-0ngress
      namespace: dhana
    spec:
      rules:
      - host: myapp.com
        http:
          paths:
          - path: /
            pathType: Prefix
            backend:
              service: myapp
                name: 
                port:
                  number: 80
---
#kind=deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: dhana
  labels:
    app: myapp
spec:
  selector:
    matchLabels:
      app:myapp
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: myapp
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      containers:
      - name: myapp
        image:  nginx:latest
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        livenessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /_status/healthz
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        
        ports:
        - containerPort:  80
          name: myapp
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
      volumes:
        - name: localtime
          emptyDir: {}
      restartPolicy: Always
